{"version":3,"sources":["logo.svg","components/Day/Day.js","components/Month/Month.js","util/createDefaultCalendar.js","components/Calendar/Calendar.js","util/usePersistedState.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Day","props","className","onClick","value","isFilled","Month","dayClicked","day","toggleDay","shortName","days","map","isFilledDay","index","key","createDefaultCalendar","name","createArray","isLeapYear","length","Array","from","year","Date","getFullYear","Calendar","defaultValue","React","useState","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","usePersistedState","calendar","setCalendar","createToggleDay","updatedCalendar","month","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb5f0668.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Day.css';\r\n\r\nconst Day = (props) => {\r\n  return (\r\n    <div className=\"hexagon-parent\" onClick={() => props.onClick(props.value)}>\r\n      <div className={props.isFilled ? \"hexagon fill\" : \"hexagon\"}>\r\n        <span>{props.value}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","import './Month.css';\r\nimport Day from '../Day/Day';\r\nimport React from 'react';\r\n\r\nconst Month = (props) => {\r\n  const dayClicked = (day) => {\r\n    props.toggleDay(day);\r\n  }\r\n  const makeDays = (days) => {\r\n    const dayElements = [];\r\n    for(let i = 1; i <= days; i++) {\r\n      dayElements.push((<Day key={i} onClick={dayClicked} value={i}></Day>));\r\n    }\r\n    return dayElements;\r\n  }\r\n\r\n  return (\r\n    <div className=\"month\">\r\n      <h3>{props.value.shortName}</h3>\r\n      {props.value.days.map((isFilledDay, index) => \r\n        (<Day key={index} onClick={dayClicked} isFilled={isFilledDay} value={index+1}></Day>))}\r\n    </div>\r\n  );\r\n};\r\nexport default Month;","export default function createDefaultCalendar() {\r\n  return [\r\n    {\r\n      name: 'January',\r\n      shortName: 'Jan',\r\n      days: createArray(31)\r\n    },\r\n    {\r\n      name: 'February',\r\n      shortName: 'Feb',\r\n      days: createArray(isLeapYear() ? 29 : 28)\r\n    },\r\n    {\r\n      name: 'March',\r\n      shortName: 'Mar',\r\n      days: createArray(31)\r\n    },\r\n    {\r\n      name: 'April',\r\n      shortName: 'Apr',\r\n      days: createArray(30)\r\n    },\r\n    {\r\n      name: 'May',\r\n      shortName: 'May',\r\n      days: createArray(31)\r\n    },\r\n    {\r\n      name: 'June',\r\n      shortName: 'Jun',\r\n      days: createArray(30)\r\n    },\r\n    {\r\n      name: 'July',\r\n      shortName: 'Jul',\r\n      days: createArray(31)\r\n    },\r\n    {\r\n      name: 'August',\r\n      shortName: 'Aug',\r\n      days: createArray(31)\r\n    },\r\n    {\r\n      name: 'September',\r\n      shortName: 'Sep',\r\n      days: createArray(30)\r\n    },\r\n    {\r\n      name: 'October',\r\n      shortName: 'Oct',\r\n      days: createArray(31)\r\n    },\r\n    {\r\n      name: 'November',\r\n      shortName: 'Nov',\r\n      days: createArray(30)\r\n    },\r\n    {\r\n      name: 'December',\r\n      shortName: 'Dec',\r\n      days: createArray(31)\r\n    }\r\n  ];\r\n};\r\nconst createArray = (length) => Array.from({length}, () => false); \r\nconst isLeapYear = () => {\r\n  const date = new Date();\r\n  const year = date.getFullYear();\r\n  return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\r\n}","import React, { useState } from 'react';\r\nimport './Calendar.css';\r\nimport usePersistedState from '../../util/usePersistedState';\r\nimport Month from '../Month/Month';\r\nimport createDefaultCalendar from '../../util/createDefaultCalendar';\r\n\r\nconst Calendar = () => {\r\n  const [calendar, setCalendar] = usePersistedState('calendar', createDefaultCalendar);\r\n\r\n  const createToggleDay = (index) => (day) => {\r\n    const updatedCalendar = [...calendar];\r\n    updatedCalendar[index] = {...updatedCalendar[index]};\r\n    updatedCalendar[index].days[day-1] = !updatedCalendar[index].days[day-1];\r\n    setCalendar(updatedCalendar);\r\n  };\r\n\r\n  const clearCalendar = () => {\r\n    setCalendar(createDefaultCalendar());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Every Day Calendar</h2>\r\n      <button className=\"reset\" onClick={clearCalendar}>Clear</button>\r\n      <div className=\"months\">\r\n        {calendar.map((month, index) => <Month value={month} key={month.shortName} toggleDay={createToggleDay(index)}></Month>)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","import React, { useEffect } from 'react';\r\n\r\n\r\nexport default function usePersistedState(key, defaultValue) {\r\n  const [state, setState] = React.useState(() => JSON.parse(localStorage.getItem(key)) || (typeof defaultValue === 'function' ? defaultValue() : defaultValue));\r\n  useEffect(() => {\r\n    localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n  return [state, setState];\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Calendar from './components/Calendar/Calendar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calendar></Calendar>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}